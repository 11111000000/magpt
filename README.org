* MaGPT — Universal, Safe Git/Magit AI Assistant for Emacs
:PROPERTIES:
:DESCRIPTION: Provider‑agnostic, safety‑first assistant for Git in Emacs, integrating with Magit and gptel. Generates commit messages, explains repo state, recommends safe actions, and records results for review—always preview‑first and reversible.
:END:

** Vision / What and Why
 MaGPT augments everyday Git work in Emacs with practical, preview‑first assistance. It started as a high‑quality commit message generator and evolved into a small, extensible set of “tasks” that help you observe repository state, plan safe next steps, and keep full control. It is designed for developers who want reliable assistance without surprises: explicit confirmation before sending any content, reversible actions only, and seamless integration with Emacs, Magit, and gptel.

** Features
MaGPT generates Conventional‑Commits‑friendly messages from your staged diff, adds a compact “AI overview” to Magit Status, and provides several safe, read‑only tasks like explaining current status, linting a commit message, or suggesting a branch name. When you need more, turn on the task registry to unlock “recommend” flows: explain a hunk or region, propose file‑level staging plans (with reversible “Apply”), summarize a commit range, or preview a minimal patch for conflict resolution. All AI interactions are asynchronous and logged; nothing is changed without an explicit preview and confirmation.

** Screenshot
A quick look at MaGPT integrated with Magit Status and the AI actions transient:

#+caption: MaGPT overview in Magit Status and AI actions
#+attr_org: :width 900
[[./magpt.png]]

** Installation
MaGPT is a single Emacs Lisp file. It requires Emacs 28.1+ and gptel 0.9+. Magit and transient are optional and used when available.

- From MELPA (when published):
#+begin_src emacs-lisp
(package-install 'magpt)
(require 'magpt)
;; Optional: integrate entry into Magit
(magpt-mode 1)
#+end_src

- Using use-package (after installing gptel):
#+begin_src emacs-lisp
(use-package gptel :ensure t)
(use-package magpt
  :ensure nil                      ; adjust to t when on MELPA
  :load-path "/path/to/magpt/"
  :commands (magpt-generate-commit-message magpt-commit-staged magpt-explain-status)
  :init
  (magpt-mode 1))
#+end_src

- Using straight.el:
#+begin_src emacs-lisp
(straight-use-package '(magpt :type git :host github :repo "11111000000/magpt"))
(use-package magpt
  :after gptel
  :init (magpt-mode 1))
#+end_src

- Manual:
#+begin_src emacs-lisp
(add-to-list 'load-path "/path/to/magpt/")
(require 'magpt)
(magpt-mode 1)
#+end_src

Magit/transient are optional. When present, MaGPT adds a non‑intrusive entry to the Magit commit menu and a compact overview to Magit Status.

** Quickstart
Stage some changes, open a commit buffer, then ask MaGPT to draft a message. You will see a confirmation showing the exact byte size of what is sent. If you keep a commit buffer visible, a small overlay appears while the request runs. The message is inserted at the top of the buffer, and any existing comment block is preserved. If no commit buffer is open, the result is shown in a read‑only buffer and also copied to the kill‑ring for easy pasting.

** Usage (main entry points)
- magpt-generate-commit-message
  Generate a commit message from the staged diff. If a commit buffer exists and insertion is enabled, MaGPT writes the result above the trailing comment block. Otherwise it opens a read‑only buffer with the message and copies it to the kill‑ring.

- magpt-commit-staged
  If Magit is available, open (or reuse) a Magit commit buffer and request a message from the staged diff. This is equivalent to opening the commit buffer and running magpt-generate-commit-message in one go.

- magpt-mode
  Global minor mode that integrates MaGPT with Magit: adds a commit entry, a compact AI overview to Magit Status, and a direct “.” key for AI actions.

- magpt-explain-status
  Ask the assistant to summarize the current repository status with a short rationale, risks, and concrete next commands (recorded to history and surfaced in the Magit overview).

- magpt-show-log
  Open a diagnostic log of MaGPT’s activity (useful for debugging providers or task flow).

Examples:
#+begin_src emacs-lisp
;; Generate a message from staged diff inside a commit buffer:
(M-x magpt-generate-commit-message)

;; Open a Magit commit buffer and fill it with an AI message:
(M-x magpt-commit-staged)

;; Get a compact status overview and actionable suggestions:
(M-x magpt-explain-status)

;; Enable integration and overview on Emacs start:
(add-hook 'after-init-hook (lambda () (magpt-mode 1)))
#+end_src

** Concepts and Architecture
MaGPT uses a small “task registry” that treats each assistant operation as a pipeline: it collects minimal context, builds a clear prompt, sends a request via gptel, and then renders a result (optionally enabling a safe “Apply”). Tasks stay provider‑agnostic and can be extended or replaced. The project follows a simple evolution path: observe repository state first, then recommend safe actions, then mediate tricky flows with minimal, reversible previews.

** Safety and Privacy
MaGPT is explicit by default. Before sending any content, it asks for confirmation and shows the byte size of data that will be uploaded; if the diff exceeds a limit, it is safely truncated on UTF‑8 boundaries and you will see the truncated size. All operations are asynchronous; commit buffers show an overlay while requests run and clean up on errors. No changes are made without your approval: messages are inserted only into commit buffers you control, and “Apply” actions are strictly limited to reversible, whole‑file staging operations or index‑only patch application. You can keep everything local by using gptel backends like Ollama.

** Provider setup (via gptel)
To use OpenAI:
#+begin_src emacs-lisp
(setq gptel-api-key (getenv "OPENAI_API_KEY"))
;; Optionally choose a model for MaGPT explicitly:
(setq magpt-model "gpt-4o-mini")   ; or nil to inherit from gptel
#+end_src

To use a local Ollama model:
#+begin_src emacs-lisp
(require 'gptel)
(setq gptel-backend (gptel-make-ollama "ollama" :host "localhost:11434"))
(setq magpt-model "llama3")  ; use your local model name; nil inherits gptel’s selection
#+end_src

If magpt-model is nil, MaGPT inherits the model from gptel.

** Customization
MaGPT options can be set via Customize or in init files, and they can be overridden per project with a .magptrc file at the repository root. User RC (~/.magptrc) loads first; project RC overrides it.

#+begin_src emacs-lisp
;; Example per‑project .magptrc (place at repo root)
'(
  (magpt-info-language . "English")
  (magpt-commit-language . "English")
  (magpt-enable-task-registry . t)
  (magpt-model . "gpt-4o-mini")
  (magpt-allow-apply-safe-ops . t))
#+end_src

Settings (variable, default, description):
| Variable                               | Default                   | Description                                                                                                    |
|----------------------------------------+---------------------------+----------------------------------------------------------------------------------------------------------------|
| magpt-model                            | nil                       | Model name for gptel requests; nil inherits gptel’s current backend/model.                                     |
| magpt-info-language                    | "English"                 | Preferred language for informative content and prompts (tasks, overviews).                                     |
| magpt-commit-language                  | nil                       | Preferred language for generated commit messages; nil means “no preference.”                                   |
| magpt-commit-prompt                    | long template             | Prompt template for commit message generation; diff is appended with clear begin/end markers.                  |
| magpt-max-diff-bytes                   | 200000                    | Maximum UTF‑8 byte size of diff sent for commit generation; truncates safely if exceeded.                      |
| magpt-insert-into-commit-buffer        | t                         | If non‑nil, insert results into a live commit buffer; otherwise open a read‑only buffer and copy to kill‑ring. |
| magpt-project-root-strategy            | prefer-magit              | How to determine repo root: prefer-magit, prefer-vc, or prefer-project.                                        |
| magpt-diff-args                        | ("--staged" "--no-color") | Extra args used with git diff when collecting staged changes.                                                  |
| magpt-confirm-before-send              | t                         | Ask for confirmation before sending content to the model.                                                      |
| magpt-allow-apply-safe-ops             | t                         | Gate for reversible “Apply” actions (e.g., file‑level stage/unstage, index‑only patch).                        |
| magpt-rc-file-name                     | ".magptrc"                | Per‑project RC file name at repo root.                                                                         |
| magpt-user-rc-file                     | "~/.magptrc"              | Path to user‑level RC; loaded before project RC (can be nil to disable).                                       |
| magpt-log-enabled                      | t                         | Enable diagnostic logging to the buffer named by magpt-log-buffer-name.                                        |
| magpt-log-buffer-name                  | "*magpt-log/"             | Diagnostics buffer name.                                                                                       |
| magpt-commit-overlay-text              | "Message generation..."   | Overlay text in commit buffers while generation is in progress.                                                |
| magpt-enable-task-registry             | t                         | Enable experimental task registry (observe/recommend/resolve tasks).                                           |
| magpt-ui-density                       | regular                   | Density profile for the Magit AI overview: regular or compact.                                                 |
| magpt-overview-compact-max-risks       | 3                         | Max risks shown in compact density for Explain Status.                                                         |
| magpt-overview-compact-max-suggestions | 3                         | Max suggestions shown in compact density for Explain Status.                                                   |
| magpt-magit-overview-enabled           | t                         | Insert compact “AI overview (magpt)” section into Magit Status.                                                |

Notes on localization: MaGPT uses the info and commit language preferences to nudge the model via prompts. Some user messages (UI echoes) are localized to English and Russian.

** Magit integration
When magpt-mode is active, MaGPT integrates without changing Magit defaults. The Magit commit transient gets an extra entry to request an AI message for the current staged diff. The Magit Status buffer shows a compact “AI overview (magpt)” section summarizing the latest Explain Status, with per‑task cards for recent results. A dedicated “.” key in Magit Status opens AI actions for quick previews and copies.

A particularly convenient combination is [. g]: press “.” in Magit Status to open the AI actions transient, then press “g” to get fresh recommendations (Explain Status) and update the overview.

Transient keys:
- In magit-commit transient:
  - i — Commit with AI message (magpt) ⇒ magpt-commit-staged
- In magit-dispatch (varies by Magit/Transient version; MaGPT adds a robust “.” entry):
  - . — AI actions (magpt) ⇒ magpt-ai-actions
- In magpt-ai-actions (transient provided by MaGPT):
  - p — Preview suggestion commands (shell buffer)
  - y — Copy suggestion commands to the kill‑ring
  - s — Copy latest summary to the kill‑ring
  - g — Get new recommendations (Explain Status)
  - r — Reload actions from the overview

Explain Status suggestions include Magit key sequences when known. Keys are shown inline in the Magit overview as “[keys: …]” and also in the AI actions preview header. The model receives a runtime Magit key cheatsheet extracted from your Magit keymaps and is instructed to only use keys from that list (or leave an empty keys array if none apply). You can toggle this behavior:

#+begin_src emacs-lisp
(setq magpt-include-magit-keys-in-suggestions t)  ; default is t

** Advanced/Tasks (enable via magpt-enable-task-registry)
The task registry powers several read‑only and preview‑first operations:
- Explain Status (explain current state; record summary, risks, and suggested commands).
- Commit Lint / Fix Suggest (validate a typed message and propose a Conventional‑Commits‑friendly variant).
- Branch Name Suggest (safe, kebab‑case names with rationale and alternatives).
- Explain Hunk/Region (read‑only explanation of a selected region or Magit diff hunk).
- Stage by Intent (group changes into file‑level stage/unstage actions; reversible “Apply” gated by magpt-allow-apply-safe-ops).
- Stage by Intent (hunks via patch) (unified diff suggestion; validate with git apply --cached --check; index‑only apply with confirm).
- PR/Range Summary (concise title/summary/highlights/checklist from a commit range).
- Resolve Conflict (here) (output a minimal patch suggestion; preview and check only).

You can apply the most recent Stage by Intent plan safely:
#+begin_src emacs-lisp
(M-x magpt-stage-by-intent)            ; record plan to history
(M-x magpt-stage-by-intent-apply-last) ; file-level stage/unstage with confirmation
#+end_src

For patch‑based suggestions, use the provided preview/check commands:
- magpt-open-response-patch
- magpt-check-response-patch

All “Apply” operations are guarded by magpt-allow-apply-safe-ops and explicit y-or-n-p confirmation.

** Troubleshooting
If you see “No staged changes found”, stage changes via Magit or git add and try again. If a message is not inserted, ensure a commit buffer is open and magpt-insert-into-commit-buffer is non‑nil; otherwise the result appears in a read‑only buffer and is copied to the kill‑ring. If a model responds slowly or returns an empty response, try a different gptel backend or inspect magpt logs with M-x magpt-show-log. When Git is not found, check PATH within Emacs. The Magit overview never triggers requests itself; if it looks empty, open AI actions with “.” and press “g” to refresh.

** Compatibility and Requirements
MaGPT requires Emacs 28.1 or newer and gptel 0.9 or newer. A Git executable must be available on PATH. Magit and transient are optional; when present, MaGPT adds extra entries and a compact overview section without modifying built‑in flows.

** Contributing
Issues and pull requests are welcome. Keep user‑visible changes safe and reversible, prefer provider‑agnostic prompts, and document any new tasks in terms of context → prompt → render/apply. Tests covering UTF‑8 truncation, commit buffer boundaries, and reversible operations are appreciated.

** License
MIT. See the LICENSE file in the repository.

** Links
- Source: https://github.com/11111000000/magpt
- gptel: https://github.com/karthink/gptel
- Magit: https://magit.vc/

