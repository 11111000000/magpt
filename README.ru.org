* MaGPT — универсальный, безопасный AI‑помощник для Git/Magit в Emacs
:PROPERTIES:
:DESCRIPTION: Независящий от провайдера, ориентированный на безопасность помощник для Git в Emacs, интегрированный с Magit и gptel. Генерирует сообщения коммитов, объясняет состояние репозитория, предлагает безопасные действия и ведет историю результатов — всегда с предварительным просмотром и возможностью отката.
:END:

** Видение / Что и зачем
MaGPT дополняет повседневную работу с Git в Emacs практичной, ориентированной на предварительный просмотр помощью. Он начинался как генератор качественных сообщений коммитов и вырос в небольшой, расширяемый набор «задач», которые помогают увидеть состояние репозитория, спланировать безопасные следующие шаги и сохранить полный контроль. Он предназначен для разработчиков, которым нужна надежная помощь без сюрпризов: явное подтверждение перед отправкой любых данных, только обратимые действия и бесшовная интеграция с Emacs, Magit и gptel.

** Возможности
MaGPT генерирует сообщения в духе Conventional Commits по вашему застейдженному диффу, добавляет компактный «AI‑обзор» в Magit Status и предоставляет несколько безопасных, только для чтения задач — например, объяснить текущее состояние, проверить сообщение коммита или предложить имя ветки. Когда нужно больше, включите реестр задач, чтобы открыть доступ к «рекомендующим» потокам: объяснение хунка или выделенной области, предложение групп файлов для stage/unstage (с обратимым «Применить»), суммирование диапазона коммитов или предпросмотр минимального патча для разрешения конфликта. Все взаимодействия с ИИ асинхронные и логируются; ничего не меняется без явного предварительного просмотра и подтверждения.

** Скриншот
Быстрый взгляд на MaGPT, интегрированный с Magit Status и transient «AI actions»:

#+caption: Обзор MaGPT в Magit Status и меню AI actions
#+attr_org: :width 900
[[./magpt.png]]

** Установка
MaGPT — это один файл на Emacs Lisp. Требуются Emacs 28.1+ и gptel 0.9+. Magit и transient — опциональны и используются при наличии.

- Из MELPA (когда будет опубликован):
#+begin_src emacs-lisp
(package-install 'magpt)
(require 'magpt)
;; Необязательно: интеграция с Magit
(magpt-mode 1)
#+end_src

- Через use-package (после установки gptel):
#+begin_src emacs-lisp
(use-package gptel :ensure t)
(use-package magpt
  :ensure nil                      ; замените на t, когда появится в MELPA
  :load-path "/path/to/magpt/"
  :commands (magpt-generate-commit-message magpt-commit-staged magpt-explain-status)
  :init
  (magpt-mode 1))
#+end_src

- Через straight.el:
#+begin_src emacs-lisp
(straight-use-package '(magpt :type git :host github :repo "11111000000/magpt"))
(use-package magpt
  :after gptel
  :init (magpt-mode 1))
#+end_src

- Вручную:
#+begin_src emacs-lisp
(add-to-list 'load-path "/path/to/magpt/")
(require 'magpt)
(magpt-mode 1)
#+end_src

Magit/transient — опциональны. При наличии MaGPT добавляет ненавязчивый пункт в меню коммита Magit и компактный обзор в Magit Status.

** Быстрый старт
Застейджьте изменения, откройте буфер коммита и попросите MaGPT набросать сообщение. Вы увидите подтверждение с точным размером в байтах данных, которые будут отправлены. Если у вас открыт буфер коммита, во время запроса появится небольшой оверлей. Сообщение вставляется в верхнюю часть буфера, а существующий блок комментариев сохраняется. Если буфер коммита не открыт, результат покажется в буфере только для чтения и также будет скопирован в kill‑ring для удобной вставки.

** Использование (основные точки входа)
- magpt-generate-commit-message
  Сгенерировать сообщение коммита из застейдженного диффа. Если буфер коммита существует и вставка разрешена, MaGPT запишет результат над завершающим блоком комментариев. Иначе откроется буфер только для чтения, а текст будет скопирован в kill‑ring.

- magpt-commit-staged
  Если доступен Magit, открыть (или переиспользовать) буфер коммита и запросить сообщение по застейдженному диффу. Эквивалентно открытию буфера коммита и запуску magpt-generate-commit-message за один шаг.

- magpt-mode
  Глобальный минор‑режим, интегрирующий MaGPT с Magit: добавляет пункт для коммита, компактный AI‑обзор в Magit Status и прямую клавишу «.» для AI actions.

- magpt-explain-status
  Попросить ассистента кратко резюмировать текущее состояние репозитория: сводка, риски и конкретные команды следующих шагов (сохраняется в историю и отображается в обзоре Magit).

- magpt-show-log
  Открыть диагностический лог активности MaGPT (полезно для отладки провайдеров или потоков задач).

Примеры:
#+begin_src emacs-lisp
;; Сгенерировать сообщение из застейдженного диффа прямо в буфере коммита:
(M-x magpt-generate-commit-message)

;; Открыть буфер коммита Magit и заполнить его AI-сообщением:
(M-x magpt-commit-staged)

;; Получить компактный обзор статуса и набор действий:
(M-x magpt-explain-status)

;; Включить интеграцию и обзор при старте Emacs:
(add-hook 'after-init-hook (lambda () (magpt-mode 1)))
#+end_src

** Концепции и архитектура
MaGPT использует небольшой «реестр задач», воспринимая каждую операцию помощника как конвейер: сбор минимального контекста, построение ясного промпта, отправка запроса через gptel и рендер результата (с опциональным безопасным «Применить»). Задачи остаются независимыми от провайдера и могут расширяться или заменяться. Проект следует простой эволюции: сначала наблюдать состояние репозитория, затем рекомендовать безопасные действия, затем сопровождать сложные потоки с минимальными и обратимыми предпросмотрами.

** Безопасность и конфиденциальность
MaGPT по умолчанию — максимально явный. Перед отправкой любых данных он спрашивает подтверждение и показывает размер байтов, которые будут переданы; если дифф превышает лимит, он безопасно обрезается по границам UTF‑8, и вы увидите новый размер. Все операции — асинхронны; в буферах коммита показывается оверлей, который корректно убирается при ошибках. Никакие изменения не вносятся без вашего согласия: сообщения вставляются только в контролируемые вами буферы коммита, а «Применить» ограничен строго обратимыми действиями: stage/unstage целых файлов или применение патча только в индекс. Вы можете оставить всё локальным, используя бэкенды gptel вроде Ollama.

** Настройка провайдера (через gptel)
Чтобы использовать OpenAI:
#+begin_src emacs-lisp
(setq gptel-api-key (getenv "OPENAI_API_KEY"))
;; Необязательно: явно выбрать модель для MaGPT:
(setq magpt-model "gpt-4o-mini")   ; или nil, чтобы наследовать из gptel
#+end_src

Чтобы использовать локальную модель Ollama:
#+begin_src emacs-lisp
(require 'gptel)
(setq gptel-backend (gptel-make-ollama "ollama" :host "localhost:11434"))
(setq magpt-model "llama3")  ; имя вашей локальной модели; nil наследует выбор gptel
#+end_src

Если magpt-model равен nil, MaGPT наследует модель из gptel.

** Настройка
Параметры MaGPT можно задать через Customize или в init‑файлах; они могут быть переопределены на уровне проекта через файл .magptrc в корне репозитория. Пользовательский RC (~/.magptrc) загружается первым, а проектный перекрывает его.

#+begin_src emacs-lisp
;; Пример .magptrc для проекта (поместите в корень репозитория)
'(
  (magpt-info-language . "English")
  (magpt-commit-language . "English")
  (magpt-enable-task-registry . t)
  (magpt-model . "gpt-4o-mini")
  (magpt-allow-apply-safe-ops . t))
#+end_src

Настройки (переменная, по умолчанию, описание):
| Variable                               | Default                   | Description                                                                                                    |
|----------------------------------------+---------------------------+----------------------------------------------------------------------------------------------------------------|
| magpt-model                            | nil                       | Имя модели для запросов через gptel; nil наследует текущий бэкенд/модель gptel.                                |
| magpt-info-language                    | "English"                 | Предпочтительный язык для информативного контента и промптов (задачи, обзоры).                                 |
| magpt-commit-language                  | nil                       | Предпочтительный язык для сообщений коммитов; nil — «без предпочтения».                                        |
| magpt-commit-prompt                    | long template             | Шаблон промпта для генерации сообщений; дифф добавляется с явными маркерами начала/конца.                      |
| magpt-max-diff-bytes                   | 200000                    | Максимальный размер диффа (в байтах UTF‑8), отправляемого для генерации; безопасно обрезается при превышении.  |
| magpt-insert-into-commit-buffer        | t                         | Если non‑nil, вставлять результат в живой буфер коммита; иначе открыть буфер только для чтения и копировать в kill‑ring. |
| magpt-project-root-strategy            | prefer-magit              | Как определять корень репозитория: prefer-magit, prefer-vc или prefer-project.                                 |
| magpt-diff-args                        | ("--staged" "--no-color") | Дополнительные аргументы для git diff при сборе застейдженных изменений.                                       |
| magpt-confirm-before-send              | t                         | Спрашивать подтверждение перед отправкой данных в модель.                                                       |
| magpt-allow-apply-safe-ops             | t                         | Флаг обратимых «Применить» (например, stage/unstage целых файлов, применение патча только в индекс).           |
| magpt-rc-file-name                     | ".magptrc"                | Имя RC‑файла на уровне проекта (в корне репозитория).                                                           |
| magpt-user-rc-file                     | "~/.magptrc"              | Путь к пользовательскому RC; загружается перед проектным (можно nil, чтобы выключить).                         |
| magpt-log-enabled                      | t                         | Включить диагностическое логирование в буфер magpt-log-buffer-name.                                            |
| magpt-log-buffer-name                  | "*magpt-log/"             | Имя диагностического буфера.                                                                                   |
| magpt-commit-overlay-text              | "Message generation..."   | Текст оверлея в буфере коммита, пока идет генерация.                                                            |
| magpt-enable-task-registry             | t                         | Включить экспериментальный реестр задач (observe/recommend/resolve).                                           |
| magpt-ui-density                       | regular                   | Плотность UI для AI‑обзора в Magit: regular или compact.                                                        |
| magpt-overview-compact-max-risks       | 3                         | Максимум рисков в compact‑режиме для Explain Status.                                                            |
| magpt-overview-compact-max-suggestions | 3                         | Максимум рекомендаций в compact‑режиме для Explain Status.                                                      |
| magpt-magit-overview-enabled           | t                         | Вставлять компактный раздел «AI overview (magpt)» в Magit Status.                                              |

Замечания о локализации: MaGPT использует предпочтения языков для подсказки модели через промпты. Некоторые пользовательские сообщения (UI‑эха) локализованы на английский и русский.

** Интеграция с Magit
Когда активен magpt-mode, MaGPT интегрируется, не меняя стандартов Magit. В transient меню коммита появляется дополнительный пункт для запроса AI‑сообщения по текущему застейдженному диффу. В Magit Status показывается компактный раздел «AI overview (magpt)», суммирующий последний Explain Status, с карточками для недавних результатов. Отдельная клавиша «.» в Magit Status открывает AI actions для быстрых предпросмотров и копирования.

Особенно удобна комбинация [. g]: нажмите «.» в Magit Status, чтобы открыть transient AI actions, затем «g», чтобы получить новые рекомендации (Explain Status) и обновить обзор.

Клавиши transient:
- В magit-commit transient:
  - i — Commit with AI message (magpt) ⇒ magpt-commit-staged
- В magit-dispatch (зависит от версий Magit/Transient; MaGPT добавляет устойчивый пункт «.»):
  - . — AI actions (magpt) ⇒ magpt-ai-actions
- В magpt-ai-actions (transient от MaGPT):
  - p — Предпросмотр команд рекомендации (буфер shell)
  - y — Копировать команды рекомендации в kill‑ring
  - s — Копировать последнюю сводку в kill‑ring
  - g — Получить новые рекомендации (Explain Status)
  - r — Перечитать рекомендации из обзора

** Продвинутое/Задачи (включается через magpt-enable-task-registry)
Реестр задач питает несколько операций, ориентированных на чтение и предварительный просмотр:
- Explain Status (объяснить текущее состояние; записать сводку, риски и предлагаемые команды).
- Commit Lint / Fix Suggest (проверить набранное сообщение и предложить вариант в стиле Conventional Commits).
- Branch Name Suggest (безопасные имена веток в kebab‑case с обоснованием и альтернативами).
- Explain Hunk/Region (объяснение выбранного участка файла или хунка в Magit diff).
- Stage by Intent (сгруппировать изменения по целофайловым действиям stage/unstage; обратимое «Применить», управляется magpt-allow-apply-safe-ops).
- Stage by Intent (hunks via patch) (предложение unified diff; проверка через git apply --cached --check; опциональное применение только в индекс с подтверждением).
- PR/Range Summary (краткий title/summary/highlights/checklist по диапазону коммитов).
- Resolve Conflict (here) (предложить минимальный патч; предпросмотр и проверка).

Можно безопасно применить последний план Stage by Intent:
#+begin_src emacs-lisp
(M-x magpt-stage-by-intent)            ; записать план в историю
(M-x magpt-stage-by-intent-apply-last) ; целофайловые stage/unstage с подтверждением
#+end_src

Для предложений, основанных на патчах, используйте команды предпросмотра/проверки:
- magpt-open-response-patch
- magpt-check-response-patch

Все операции «Применить» защищены флагом magpt-allow-apply-safe-ops и явным подтверждением через y-or-n-p.

** Устранение неполадок
Если видите «No staged changes found», застейджьте изменения через Magit или git add и попробуйте снова. Если сообщение не вставляется, убедитесь, что буфер коммита открыт и magpt-insert-into-commit-buffer не равен nil; иначе результат появится в буфере только для чтения и будет скопирован в kill‑ring. Если модель отвечает медленно или пустым результатом, попробуйте другой бэкенд gptel или посмотрите лог MaGPT через M-x magpt-show-log. Если Git не найден, проверьте PATH внутри Emacs. Обзор Magit никогда не инициирует запросы сам; если он пуст, откройте AI actions клавишей «.» и нажмите «g», чтобы обновить.

** Совместимость и требования
MaGPT требует Emacs 28.1 или новее и gptel 0.9 или новее. В PATH должен быть доступен исполняемый Git. Magit и transient — опциональны; при их наличии MaGPT добавляет дополнительные пункты и компактный обзор без изменения встроенных потоков работы.

** Участие в разработке
Исходники и PR приветствуются. Сохраняйте изменения, видимые пользователю, безопасными и обратимыми, предпочитайте промпты, независимые от провайдера, и документируйте новые задачи как контекст → промпт → запрос/рендер/применение. Особенно ценны тесты, покрывающие обрезку по UTF‑8, границы буфера коммита и обратимые операции.

** Лицензия
MIT. См. файл LICENSE в репозитории.

** Ссылки
- Исходники: https://github.com/11111000000/magpt
- gptel: https://github.com/karthink/gptel
- Magit: https://magit.vc/
