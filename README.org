* MaGPT 1.1.0
:PROPERTIES:
:DESCRIPTION: AI commit messages for Git in Emacs via gptel, with optional Magit integration.
:END:

** magpt.el — AI Commit Messages for Git in Emacs

MaGPT (magpt.el) is an Emacs package that generates high‑quality Git commit messages from the diff of your staged changes. It talks to LLMs via gptel and integrates nicely with Magit, while remaining usable with plain Git/VC/project.el.

- Provider‑agnostic: no hardcoded model; inherits your gptel default by default.
- Safe defaults: confirmation before sending diffs, transparent truncation, comments preserved.
- Smooth UX: overlay while generating; inserts at the top of commit buffer; async and non-blocking.

** Features

- Generate clear, Conventional‑Commit‑friendly messages from your staged diff.
- Uses gptel to access local or remote LLMs (OpenAI, Ollama, etc).
- Optional Magit integration: open commit buffer and autofill in one command.
- Provider/model agnostic (defaults to gptel’s current model; can be customized).
- Preserves git‑commit comments and structure; inserts message at the top only.
- Accurate comment detection using git-commit-mode’s configured comment char.
- Diff truncation by UTF‑8 bytes with correctness guarantees.
- Confirmation prompt shows original/sent byte sizes before uploading the diff.
- Async requests with a visible overlay (“Message generation...”) and clean teardown on errors.

** Requirements

- Emacs 28.1+
- gptel 0.9+ (backend/provider configuration required)
- Magit (optional, recommended for best UX)

** Installation

Clone or place magpt.el into your load-path and require it:

#+begin_src emacs-lisp
(add-to-list 'load-path "/path/to/magpt/")
(require 'magpt)
#+end_src

With use-package (straight.el example):

#+begin_src emacs-lisp
(straight-use-package '(magpt :type git :host github :repo "11111000000/magpt"))
(use-package magpt
  :after gptel
  :commands (magpt-generate-commit-message magpt-commit-staged)
  :init
  ;; Optional: integrate with Magit transient (adds "i" in magit-commit popup)
  (magpt-mode 1))
#+end_src

MELPA (once accepted) will allow the usual M-x package-install flow.

** Quickstart

1. Stage your changes (git add ... or via Magit).
2. Open a commit buffer (Magit: C then c; or start a normal Git commit).
3. Generate:
   - In a commit buffer: M-x magpt-generate-commit-message
   - Or open+fill in one go with Magit: M-x magpt-commit-staged
4. Confirm sending the diff when prompted (shows bytes; notes truncation if any).
5. Review the inserted message at the top of the commit buffer, tweak if needed, then C-c C-c.

If no commit buffer is available or insertion is disabled, the result appears in a read-only buffer named *magpt-commit* and is copied to your kill-ring.

** Commands

- magpt-generate-commit-message
  - Generate a message from the staged diff and insert it into an existing commit buffer (or show in *magpt-commit*).
- magpt-commit-staged
  - Requires Magit. Opens a commit buffer and generates/inserts the message automatically.
- magpt-mode (global minor mode)
  - When enabled, adds an “[i] Commit with AI message (magpt)” entry to Magit’s commit transient.

** Customization

All options live under M-x customize-group RET magpt RET.

- magpt-model (default: nil)
  - LLM model name for gptel. When nil, uses gptel’s current default model/provider.
- magpt-commit-prompt
  - Prompt template appended with the diff; tuned for Conventional Commits.
- magpt-max-diff-bytes (default: 200000)
  - Max bytes of diff to include; nil disables limit. Truncation respects UTF‑8 boundaries.
- magpt-insert-into-commit-buffer (default: t)
  - If t and a commit buffer exists, insert there; otherwise show in *magpt-commit*.
- magpt-project-root-strategy (default: prefer-magit)
  - How to find the repo root: prefer-magit | prefer-vc | prefer-project.
- magpt-diff-args (default: '("--staged" "--no-color"))
  - Extra args for git diff when building the staged diff.
- magpt-confirm-before-send (default: t)
  - Ask for confirmation before sending the diff; shows original/sent sizes, mentions truncation.
- magpt-commit-overlay-text (default: "Message generation...")
  - Text shown as an overlay during async generation.

Faces:
- magpt-commit-overlay-face
  - Face for the overlay line in the commit buffer.

Example configuration:

#+begin_src emacs-lisp
(customize-set-variable 'magpt-model nil) ;; inherit from gptel
(customize-set-variable 'magpt-max-diff-bytes 200000)
(customize-set-variable 'magpt-confirm-before-send t)
(customize-set-variable 'magpt-project-root-strategy 'prefer-magit)
#+end_src

** Experimental (Phase 0)

These features are optional and off by default. They harden the core without changing 1.0.0 behavior.

- magpt-stream-output (default: nil)
  - If non-nil, requests streaming mode from gptel when supported. Insertion semantics remain unchanged.
- magpt-progress-spinner (default: nil)
  - If non-nil, animates the commit buffer overlay while waiting for the model. Overlay teardown is unified and robust.
- Experimental task registry (magpt-enable-task-registry, default: nil)
  - Provides a generic task runner API (context → prompt → request → render/apply).
  - To use interactive task launcher: set magpt-enable-task-registry to t, then M-x magpt-run-task.
  - When disabled, nothing is bound or invoked automatically.

Acceptance criteria for Phase 0:
- Reversibility: default behavior unchanged; new infra is behind flags.
- Observability: clear messages in *Messages*, stable overlay cleanup on errors/empty responses.
- Tests cover: UTF‑8 truncation bounds, commit comment boundaries, and empty model responses.

** Assist (Phase 1, experimental)

Read-only tasks that observe and suggest, without mutating the repo. Results are shown in a unified panel buffer (*magpt-panel*) with history. “Insert/Apply” controls are shown but disabled in this phase.

- Enabling
  - Customize: M-x customize-variable RET magpt-enable-task-registry RET → t
  - Panel auto-pop on each task: M-x customize-variable RET magpt-panel-auto-pop RET

- New interactive commands
  - M-x magpt-explain-status
    - Sends git status --porcelain to the model and returns JSON:
      { summary, risks[], suggestions[] (title, commands[]) }.
    - Renders JSON in *magpt-panel* and attempts basic JSON validation.
  - M-x magpt-commit-lint-suggest
    - Uses current commit buffer’s message (top section) and staged diff.
    - Returns JSON: { status: ok|issues, issues[], suggestion{ replace, message } }.
    - Renders JSON in *magpt-panel* (no automatic changes to the message).
  - M-x magpt-branch-name-suggest
    - Uses changed paths from porcelain status.
    - Returns JSON: { name, alternatives[], rationale }.
    - Renders JSON in *magpt-panel*.
  - M-x magpt-show-panel
    - Opens the *magpt-panel* buffer to review task history for the current repository.

- Notes
  - All tasks prompt for confirmation (shows bytes to be sent).
  - No mutations: results are text/JSON only; “Insert/Apply” remain disabled.
  - Local LLMs are recommended by default (via gptel); cloud providers require explicit setup.

** How It Works

1. Diff extraction
   - Finds the repo root via Magit/VC/project.el fallbacks.
   - Retrieves the staged diff (git diff --staged --no-color plus custom args).
2. Size control
   - Optionally truncates the diff by UTF‑8 bytes (binary search; safe boundaries).
   - Confirmation prompt indicates original vs sent sizes.
3. Prompting
   - Builds a prompt from your template + BEGIN/END DIFF markers (notes truncation).
   - Sends async via gptel, with the commit buffer set as context to manage overlay lifecycle.
4. Insertion
   - If a commit buffer is available and insertion is enabled, inserts at the top only.
   - Preserves the bottom “comments” section accurately using git-commit-mode’s comment char and section detection.
   - Otherwise, shows the result in *magpt-commit* and copies it to the kill-ring.

** Example Prompt (Default)

#+begin_example
You are an assistant that writes high-quality Git commit messages.
Requirements:
- Use Conventional Commits types when applicable (feat, fix, docs, refactor, test, chore, perf, build, ci).
- First line: concise summary <= 72 chars.
- Optional body: wrap at ~72 chars per line; explain motivation, context, and impact.
- Use imperative mood; do not include ticket/issue references unless present in diff.
- If the diff is empty or unclear, say 'chore: update' with a brief rationale.
Provide the final commit message only, no extra commentary.
#+end_example

** Provider setup (gptel)

Configure gptel for your provider (sketch):

- OpenAI-compatible:
  #+begin_src emacs-lisp
  (setq gptel-api-key (getenv "OPENAI_API_KEY"))
  ;; Optionally: (setq gptel-backend (gptel-make-openai ...))
  #+end_src

- Ollama (local):
  #+begin_src emacs-lisp
  (require 'gptel)
  (setq gptel-backend (gptel-make-ollama "ollama" :host "localhost:11434"))
  ;; Pick a local model via M-x gptel-set-model or set magpt-model to "llama3" etc.
  #+end_src

You can set magpt-model to override gptel’s default for magpt requests, or keep it nil.

** Tips

- Best results when run inside an open commit buffer (git-commit-mode), so the message drops in place.
- If you already typed a message, magpt will ask permission before replacing it (comments are preserved).
- Large repos: consider increasing magpt-max-diff-bytes or curating staged changes to focus on one logical change.

** Troubleshooting

- “No Git repository found”
  - Ensure you’re inside a Git project; check magpt-project-root-strategy.
- “No staged changes found”
  - Stage changes first (git add ... or via Magit).
- “Empty response from model”
  - Check gptel backend, API key, or try a different model.
- “Overlay stuck”
  - Errors are reported in *Messages*. Overlay should auto-clear on error; if not, re-run or close/reopen the commit buffer.
- Output not inserted
  - If no commit buffer is available (or magpt-insert-into-commit-buffer is nil), result goes to *magpt-commit* and the kill-ring.

** Privacy and Security

- magpt-confirm-before-send defaults to t. Review sizes and confirm before uploading diffs to a provider.
- Sensitive data: if it’s staged, it may be sent. Consider splitting commits or removing secrets before staging.
- Local providers (e.g., Ollama) keep data on your machine.

** What’s new in 1.0.0

- Default model is nil (inherit from gptel); provider-agnostic by default.
- Confirmation before sending (shows original/sent bytes; notes truncation).
- Improved commit buffer handling: robust detection/preservation of git-commit comments.
- Unified callback/overlay handling; cleaner and more predictable UX.
- Small internal cleanups and safer project root detection.

** License

MIT. See [[file:LICENSE][LICENSE]].

** Links

- Repo: https://github.com/11111000000/magpt
- gptel: https://github.com/karthink/gptel
- Magit: https://magit.vc/

